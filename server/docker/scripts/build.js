const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('TypeScript —Å–±–æ—Ä–∫–∞:');
console.log('--------------------------------');

// –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const currentDir = process.cwd();
console.log('–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', currentDir);

const srcDir = path.join(currentDir, 'src');
const distDir = path.join(currentDir, 'dist');
const tsconfigPath = path.join(currentDir, 'tsconfig.json');

// –í—ã–≤–æ–¥ –≤–µ—Ä—Å–∏–∏ TypeScript
console.log('üìã –í–µ—Ä—Å–∏—è TypeScript:');
try {
  const tsVersion = execSync('npx tsc --version').toString();
  console.log(tsVersion);
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä—Å–∏–∏ TypeScript:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤:');
console.log('- tsconfig.json:', fs.existsSync(tsconfigPath));
console.log('- src/', fs.existsSync(srcDir));

if (!fs.existsSync(tsconfigPath)) {
  console.log('‚ùå –§–∞–π–ª tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
  try {
    const files = fs.readdirSync(currentDir);
    console.log(files);
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error.message);
  }
  process.exit(1);
}

if (!fs.existsSync(srcDir)) {
  console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  process.exit(1);
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist
if (fs.existsSync(distDir)) {
  console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist...');
  fs.rmSync(distDir, { recursive: true, force: true });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist
console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist...');
fs.mkdirSync(distDir, { recursive: true });

try {
  // –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript
  console.log('–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript...');
  execSync('npx tsc', { stdio: 'inherit' });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
  const indexJsPath = path.join(distDir, 'index.js');
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è index.js:', indexJsPath);
  console.log('–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(indexJsPath));
  
  if (fs.existsSync(indexJsPath)) {
    console.log('‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: —Ñ–∞–π–ª index.js —Å–æ–∑–¥–∞–Ω');
  } else {
    console.log('‚ùå –ö–æ–º–ø–∏–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: —Ñ–∞–π–ª index.js –Ω–µ —Å–æ–∑–¥–∞–Ω');
    
    // –ò—â–µ–º index.ts –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    const indexTsPath = path.join(srcDir, 'index.ts');
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è index.ts:', indexTsPath);
    console.log('–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(indexTsPath));
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª index.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
    if (fs.existsSync(indexTsPath)) {
      try {
        console.log('–ö–æ–º–ø–∏–ª—è—Ü–∏—è index.ts –Ω–∞–ø—Ä—è–º—É—é...');
        execSync(`npx tsc ${indexTsPath} --outDir dist`, { stdio: 'inherit' });
      } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:', error.message);
      }
    }
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ src –≤ dist
    console.log('–ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é...');
    
    function copyAndTransform(src, dest) {
      const entries = fs.readdirSync(src, { withFileTypes: true });
      
      entries.forEach(entry => {
        const srcPath = path.join(src, entry.name);
        const destPath = path.join(dest, entry.name);
        
        if (entry.isDirectory()) {
          if (!fs.existsSync(destPath)) {
            fs.mkdirSync(destPath, { recursive: true });
          }
          copyAndTransform(srcPath, destPath);
        } else if (entry.name.endsWith('.ts')) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º .ts —Ñ–∞–π–ª—ã –≤ .js
          const content = fs.readFileSync(srcPath, 'utf8');
          const jsContent = content
            .replace(/import\s+{([^}]+)}\s+from\s+['"]([^'"]+)['"]/g, 'const { $1 } = require("$2")')
            .replace(/import\s+(\w+)\s+from\s+['"]([^'"]+)['"]/g, 'const $1 = require("$2")')
            .replace(/export\s+{([^}]+)}/g, 'module.exports = { $1 }')
            .replace(/export\s+default\s+(\w+)/g, 'module.exports = $1')
            .replace(/export\s+const\s+(\w+)/g, 'const $1 = ')
            .replace(/:\s*(\w+)(\[\])?\s*=/g, ' =')
            .replace(/:\s*(\w+)(\[\])?\s*;/g, ';')
            .replace(/interface\s+(\w+)\s*{[^}]*}/g, '')
            .replace(/type\s+(\w+)\s*=\s*[^;]*;/g, '');
          
          const jsPath = destPath.replace(/\.ts$/, '.js');
          fs.writeFileSync(jsPath, jsContent);
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª ${jsPath}`);
        } else {
          // –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          fs.copyFileSync(srcPath, destPath);
          console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª ${destPath}`);
        }
      });
    }
    
    copyAndTransform(srcDir, distDir);
    
    if (fs.existsSync(path.join(distDir, 'index.js'))) {
      console.log('‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é');
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–∞–∂–µ –≤—Ä—É—á–Ω—É—é');
      process.exit(1);
    }
  }
  
  console.log('üëç –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error.message);
  process.exit(1);
} 